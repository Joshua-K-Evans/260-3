
Lab5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000300  08000184  08000184  00001184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000484  08000484  0000200c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000484  08000484  0000200c  2**0
                  CONTENTS
  4 .ARM          00000000  08000484  08000484  0000200c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000484  08000484  0000200c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000484  08000484  00001484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000488  08000488  00001488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800048c  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  0000200c  2**0
                  CONTENTS
 10 .bss          0000001c  2000000c  2000000c  0000200c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000028  20000028  0000200c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000200c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000139  00000000  00000000  0000203c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000000e0  00000000  00000000  00002175  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000048  00000000  00000000  00002258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000002d  00000000  00000000  000022a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000b01  00000000  00000000  000022cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000194  00000000  00000000  00002dce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00002f0b  00000000  00000000  00002f62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00005e6d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000058  00000000  00000000  00005eb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005b  00000000  00000000  00005f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	@ (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	@ (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	2000000c 	.word	0x2000000c
 80001a0:	00000000 	.word	0x00000000
 80001a4:	0800046c 	.word	0x0800046c

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	@ (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	@ (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	@ (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	20000010 	.word	0x20000010
 80001c0:	0800046c 	.word	0x0800046c

080001c4 <main>:
#define BackAlarmPin    7  // PA7
#define WindowAlarmPin  8  // PA8


int main(void)
{
 80001c4:	b480      	push	{r7}
 80001c6:	b083      	sub	sp, #12
 80001c8:	af00      	add	r7, sp, #0
	// Turn on GPIO clocks (Ports A, B, and C)
    *AHB2ENR |= 0b111;
 80001ca:	4b7e      	ldr	r3, [pc, #504]	@ (80003c4 <main+0x200>)
 80001cc:	681b      	ldr	r3, [r3, #0]
 80001ce:	681a      	ldr	r2, [r3, #0]
 80001d0:	4b7c      	ldr	r3, [pc, #496]	@ (80003c4 <main+0x200>)
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	f042 0207 	orr.w	r2, r2, #7
 80001d8:	601a      	str	r2, [r3, #0]


    /* Part 2. Typed by Joshua. */

    // Configure button pin as inputs
    GPIOC->MODER &= ~(0b11 << (ArmButtonPin*2));    // configure ArmButtonPin as input
 80001da:	4b7b      	ldr	r3, [pc, #492]	@ (80003c8 <main+0x204>)
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	681a      	ldr	r2, [r3, #0]
 80001e0:	4b79      	ldr	r3, [pc, #484]	@ (80003c8 <main+0x204>)
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 80001e8:	601a      	str	r2, [r3, #0]
    GPIOC->MODER &= ~(0b11 << (DisarmButtonPin*2)); // configure DisarmButtonPin as input
 80001ea:	4b77      	ldr	r3, [pc, #476]	@ (80003c8 <main+0x204>)
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	681a      	ldr	r2, [r3, #0]
 80001f0:	4b75      	ldr	r3, [pc, #468]	@ (80003c8 <main+0x204>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 80001f8:	601a      	str	r2, [r3, #0]

    // Configure reed switch pins as inputs
    GPIOC->MODER &= ~(0b11 << (FrontSensorPin*2));; // configure FrontSensorPin as input
 80001fa:	4b73      	ldr	r3, [pc, #460]	@ (80003c8 <main+0x204>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	681a      	ldr	r2, [r3, #0]
 8000200:	4b71      	ldr	r3, [pc, #452]	@ (80003c8 <main+0x204>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8000208:	601a      	str	r2, [r3, #0]
    GPIOC->MODER &= ~(0b11 << (BackSensorPin*2));; // configure BackSensorPin as input
 800020a:	4b6f      	ldr	r3, [pc, #444]	@ (80003c8 <main+0x204>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	681a      	ldr	r2, [r3, #0]
 8000210:	4b6d      	ldr	r3, [pc, #436]	@ (80003c8 <main+0x204>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 8000218:	601a      	str	r2, [r3, #0]
    GPIOC->MODER &= ~(0b11 << (WindowSensorPin*2));; // configure WindowSensorPin as input
 800021a:	4b6b      	ldr	r3, [pc, #428]	@ (80003c8 <main+0x204>)
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	681a      	ldr	r2, [r3, #0]
 8000220:	4b69      	ldr	r3, [pc, #420]	@ (80003c8 <main+0x204>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8000228:	601a      	str	r2, [r3, #0]

    /* Part 3. Typed by Brenden. */

    // Enable pull resistors
    GPIOC->PUPDR |= (0b01 << (DisarmButtonPin*2));
 800022a:	4b67      	ldr	r3, [pc, #412]	@ (80003c8 <main+0x204>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	68da      	ldr	r2, [r3, #12]
 8000230:	4b65      	ldr	r3, [pc, #404]	@ (80003c8 <main+0x204>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8000238:	60da      	str	r2, [r3, #12]
    GPIOC->PUPDR |= (0b01 << (FrontSensorPin*2));
 800023a:	4b63      	ldr	r3, [pc, #396]	@ (80003c8 <main+0x204>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	68da      	ldr	r2, [r3, #12]
 8000240:	4b61      	ldr	r3, [pc, #388]	@ (80003c8 <main+0x204>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8000248:	60da      	str	r2, [r3, #12]
    GPIOC->PUPDR |= (0b01 << (BackSensorPin*2));
 800024a:	4b5f      	ldr	r3, [pc, #380]	@ (80003c8 <main+0x204>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	68da      	ldr	r2, [r3, #12]
 8000250:	4b5d      	ldr	r3, [pc, #372]	@ (80003c8 <main+0x204>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8000258:	60da      	str	r2, [r3, #12]
    GPIOC->PUPDR |= (0b01 << (WindowSensorPin*2));
 800025a:	4b5b      	ldr	r3, [pc, #364]	@ (80003c8 <main+0x204>)
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	68da      	ldr	r2, [r3, #12]
 8000260:	4b59      	ldr	r3, [pc, #356]	@ (80003c8 <main+0x204>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8000268:	60da      	str	r2, [r3, #12]

    /* Part 4. Typed by John. */

    // Configure LED pins as outputs
    GPIOA->MODER &= ~(0b10 << (ArmStatusPin*2)); // configure ArmStatusPin as output       WATCH
 800026a:	4b58      	ldr	r3, [pc, #352]	@ (80003cc <main+0x208>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	681a      	ldr	r2, [r3, #0]
 8000270:	4b56      	ldr	r3, [pc, #344]	@ (80003cc <main+0x208>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000278:	601a      	str	r2, [r3, #0]
    GPIOA->MODER &= ~(0b10 << (FrontAlarmPin*2)); // configure FrontAlarmPin as output
 800027a:	4b54      	ldr	r3, [pc, #336]	@ (80003cc <main+0x208>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	681a      	ldr	r2, [r3, #0]
 8000280:	4b52      	ldr	r3, [pc, #328]	@ (80003cc <main+0x208>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8000288:	601a      	str	r2, [r3, #0]
    GPIOA->MODER &= ~(0b10 << (BackAlarmPin*2)); // configure BackAlarmPin as output
 800028a:	4b50      	ldr	r3, [pc, #320]	@ (80003cc <main+0x208>)
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	681a      	ldr	r2, [r3, #0]
 8000290:	4b4e      	ldr	r3, [pc, #312]	@ (80003cc <main+0x208>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000298:	601a      	str	r2, [r3, #0]
    GPIOA->MODER &= ~(0b10 << (WindowAlarmPin*2)); // configure WindowAlarmPin as output
 800029a:	4b4c      	ldr	r3, [pc, #304]	@ (80003cc <main+0x208>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	681a      	ldr	r2, [r3, #0]
 80002a0:	4b4a      	ldr	r3, [pc, #296]	@ (80003cc <main+0x208>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80002a8:	601a      	str	r2, [r3, #0]

    // Initialize Alarm Status (turn off all LEDs)
    GPIOA->ODR &= ~(1 << ArmStatusPin);
 80002aa:	4b48      	ldr	r3, [pc, #288]	@ (80003cc <main+0x208>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	695a      	ldr	r2, [r3, #20]
 80002b0:	4b46      	ldr	r3, [pc, #280]	@ (80003cc <main+0x208>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	f022 0220 	bic.w	r2, r2, #32
 80002b8:	615a      	str	r2, [r3, #20]
    GPIOA->ODR &= ~(1 << FrontAlarmPin);
 80002ba:	4b44      	ldr	r3, [pc, #272]	@ (80003cc <main+0x208>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	695a      	ldr	r2, [r3, #20]
 80002c0:	4b42      	ldr	r3, [pc, #264]	@ (80003cc <main+0x208>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80002c8:	615a      	str	r2, [r3, #20]
    GPIOA->ODR &= ~(1 << BackAlarmPin);
 80002ca:	4b40      	ldr	r3, [pc, #256]	@ (80003cc <main+0x208>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	695a      	ldr	r2, [r3, #20]
 80002d0:	4b3e      	ldr	r3, [pc, #248]	@ (80003cc <main+0x208>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80002d8:	615a      	str	r2, [r3, #20]
    GPIOA->ODR &= ~(1 << WindowAlarmPin);
 80002da:	4b3c      	ldr	r3, [pc, #240]	@ (80003cc <main+0x208>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	695a      	ldr	r2, [r3, #20]
 80002e0:	4b3a      	ldr	r3, [pc, #232]	@ (80003cc <main+0x208>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80002e8:	615a      	str	r2, [r3, #20]

    // armed state (initialize to disarm)
    int armed = 0;
 80002ea:	2300      	movs	r3, #0
 80002ec:	607b      	str	r3, [r7, #4]
	while(1){

		/* Part 5. Typed by Joshua. */

		// check if ArmButton is pressed
		if ((GPIOC->IDR & (1 << ArmButtonPin)) == 0){
 80002ee:	4b36      	ldr	r3, [pc, #216]	@ (80003c8 <main+0x204>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	691b      	ldr	r3, [r3, #16]
 80002f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d109      	bne.n	8000310 <main+0x14c>
			// arm system
			armed = 1; // set arm state
 80002fc:	2301      	movs	r3, #1
 80002fe:	607b      	str	r3, [r7, #4]
			GPIOA->ODR |= (1 << ArmStatusPin); // turn on ArmStatus LED
 8000300:	4b32      	ldr	r3, [pc, #200]	@ (80003cc <main+0x208>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	695a      	ldr	r2, [r3, #20]
 8000306:	4b31      	ldr	r3, [pc, #196]	@ (80003cc <main+0x208>)
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	f042 0220 	orr.w	r2, r2, #32
 800030e:	615a      	str	r2, [r3, #20]
		}

		// check if DisarmButton is pressed
		if ((GPIOC->IDR & (1 << DisarmButtonPin)) == 0){
 8000310:	4b2d      	ldr	r3, [pc, #180]	@ (80003c8 <main+0x204>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	691b      	ldr	r3, [r3, #16]
 8000316:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800031a:	2b00      	cmp	r3, #0
 800031c:	d121      	bne.n	8000362 <main+0x19e>
			// disarm system
			armed = 0; // reset arm state
 800031e:	2300      	movs	r3, #0
 8000320:	607b      	str	r3, [r7, #4]
			GPIOA->ODR &= ~(1 << ArmStatusPin); // turn off ArmStatus LED
 8000322:	4b2a      	ldr	r3, [pc, #168]	@ (80003cc <main+0x208>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	695a      	ldr	r2, [r3, #20]
 8000328:	4b28      	ldr	r3, [pc, #160]	@ (80003cc <main+0x208>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	f022 0220 	bic.w	r2, r2, #32
 8000330:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~(1 << FrontAlarmPin); // turn off FrontAlarm LED
 8000332:	4b26      	ldr	r3, [pc, #152]	@ (80003cc <main+0x208>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	695a      	ldr	r2, [r3, #20]
 8000338:	4b24      	ldr	r3, [pc, #144]	@ (80003cc <main+0x208>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000340:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~(1 << BackAlarmPin); // turn off BackAlarm LED
 8000342:	4b22      	ldr	r3, [pc, #136]	@ (80003cc <main+0x208>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	695a      	ldr	r2, [r3, #20]
 8000348:	4b20      	ldr	r3, [pc, #128]	@ (80003cc <main+0x208>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000350:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~(1 << WindowAlarmPin); // turn off WindowAlarm LED
 8000352:	4b1e      	ldr	r3, [pc, #120]	@ (80003cc <main+0x208>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	695a      	ldr	r2, [r3, #20]
 8000358:	4b1c      	ldr	r3, [pc, #112]	@ (80003cc <main+0x208>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000360:	615a      	str	r2, [r3, #20]
		}

		/* Part 6. Typed by __Brenden Read__. */

		// if system is armed, check sensors
		if (armed){
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	2b00      	cmp	r3, #0
 8000366:	d0c2      	beq.n	80002ee <main+0x12a>

			// check the FrontSensor
			if ((GPIOC->IDR & (1 << FrontSensorPin)) != 0){
 8000368:	4b17      	ldr	r3, [pc, #92]	@ (80003c8 <main+0x204>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	691b      	ldr	r3, [r3, #16]
 800036e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000372:	2b00      	cmp	r3, #0
 8000374:	d007      	beq.n	8000386 <main+0x1c2>
				// system armed & front door is open:
				GPIOA->ODR |= (1 << FrontAlarmPin); // turn on FrontAlarm LED
 8000376:	4b15      	ldr	r3, [pc, #84]	@ (80003cc <main+0x208>)
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	695a      	ldr	r2, [r3, #20]
 800037c:	4b13      	ldr	r3, [pc, #76]	@ (80003cc <main+0x208>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000384:	615a      	str	r2, [r3, #20]
			}

			// check the BackSensor
			if ((GPIOC->IDR & (1 << BackSensorPin)) != 0){
 8000386:	4b10      	ldr	r3, [pc, #64]	@ (80003c8 <main+0x204>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	691b      	ldr	r3, [r3, #16]
 800038c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000390:	2b00      	cmp	r3, #0
 8000392:	d007      	beq.n	80003a4 <main+0x1e0>
				// system armed & front door is open:
				GPIOA->ODR |= (1 << BackAlarmPin); // turn on BackAlarm LED
 8000394:	4b0d      	ldr	r3, [pc, #52]	@ (80003cc <main+0x208>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	695a      	ldr	r2, [r3, #20]
 800039a:	4b0c      	ldr	r3, [pc, #48]	@ (80003cc <main+0x208>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80003a2:	615a      	str	r2, [r3, #20]
			}

			// check the WindowSensor
			if ((GPIOC->IDR & (1 << WindowSensorPin)) != 0)
 80003a4:	4b08      	ldr	r3, [pc, #32]	@ (80003c8 <main+0x204>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	691b      	ldr	r3, [r3, #16]
 80003aa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d09d      	beq.n	80002ee <main+0x12a>
				// system armed & front door is open:
				GPIOA->ODR |= (1 << WindowAlarmPin);; // turn on WindowAlarm LED
 80003b2:	4b06      	ldr	r3, [pc, #24]	@ (80003cc <main+0x208>)
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	695a      	ldr	r2, [r3, #20]
 80003b8:	4b04      	ldr	r3, [pc, #16]	@ (80003cc <main+0x208>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80003c0:	615a      	str	r2, [r3, #20]
		if ((GPIOC->IDR & (1 << ArmButtonPin)) == 0){
 80003c2:	e794      	b.n	80002ee <main+0x12a>
 80003c4:	20000000 	.word	0x20000000
 80003c8:	20000008 	.word	0x20000008
 80003cc:	20000004 	.word	0x20000004

080003d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003d0:	480d      	ldr	r0, [pc, #52]	@ (8000408 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003d2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003d4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003d8:	480c      	ldr	r0, [pc, #48]	@ (800040c <LoopForever+0x6>)
  ldr r1, =_edata
 80003da:	490d      	ldr	r1, [pc, #52]	@ (8000410 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003dc:	4a0d      	ldr	r2, [pc, #52]	@ (8000414 <LoopForever+0xe>)
  movs r3, #0
 80003de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003e0:	e002      	b.n	80003e8 <LoopCopyDataInit>

080003e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003e6:	3304      	adds	r3, #4

080003e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003ec:	d3f9      	bcc.n	80003e2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003ee:	4a0a      	ldr	r2, [pc, #40]	@ (8000418 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003f0:	4c0a      	ldr	r4, [pc, #40]	@ (800041c <LoopForever+0x16>)
  movs r3, #0
 80003f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003f4:	e001      	b.n	80003fa <LoopFillZerobss>

080003f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003f8:	3204      	adds	r2, #4

080003fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003fc:	d3fb      	bcc.n	80003f6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003fe:	f000 f811 	bl	8000424 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000402:	f7ff fedf 	bl	80001c4 <main>

08000406 <LoopForever>:

LoopForever:
  b LoopForever
 8000406:	e7fe      	b.n	8000406 <LoopForever>
  ldr   r0, =_estack
 8000408:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800040c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000410:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000414:	0800048c 	.word	0x0800048c
  ldr r2, =_sbss
 8000418:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800041c:	20000028 	.word	0x20000028

08000420 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000420:	e7fe      	b.n	8000420 <ADC1_2_IRQHandler>
	...

08000424 <__libc_init_array>:
 8000424:	b570      	push	{r4, r5, r6, lr}
 8000426:	4d0d      	ldr	r5, [pc, #52]	@ (800045c <__libc_init_array+0x38>)
 8000428:	4c0d      	ldr	r4, [pc, #52]	@ (8000460 <__libc_init_array+0x3c>)
 800042a:	1b64      	subs	r4, r4, r5
 800042c:	10a4      	asrs	r4, r4, #2
 800042e:	2600      	movs	r6, #0
 8000430:	42a6      	cmp	r6, r4
 8000432:	d109      	bne.n	8000448 <__libc_init_array+0x24>
 8000434:	4d0b      	ldr	r5, [pc, #44]	@ (8000464 <__libc_init_array+0x40>)
 8000436:	4c0c      	ldr	r4, [pc, #48]	@ (8000468 <__libc_init_array+0x44>)
 8000438:	f000 f818 	bl	800046c <_init>
 800043c:	1b64      	subs	r4, r4, r5
 800043e:	10a4      	asrs	r4, r4, #2
 8000440:	2600      	movs	r6, #0
 8000442:	42a6      	cmp	r6, r4
 8000444:	d105      	bne.n	8000452 <__libc_init_array+0x2e>
 8000446:	bd70      	pop	{r4, r5, r6, pc}
 8000448:	f855 3b04 	ldr.w	r3, [r5], #4
 800044c:	4798      	blx	r3
 800044e:	3601      	adds	r6, #1
 8000450:	e7ee      	b.n	8000430 <__libc_init_array+0xc>
 8000452:	f855 3b04 	ldr.w	r3, [r5], #4
 8000456:	4798      	blx	r3
 8000458:	3601      	adds	r6, #1
 800045a:	e7f2      	b.n	8000442 <__libc_init_array+0x1e>
 800045c:	08000484 	.word	0x08000484
 8000460:	08000484 	.word	0x08000484
 8000464:	08000484 	.word	0x08000484
 8000468:	08000488 	.word	0x08000488

0800046c <_init>:
 800046c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800046e:	bf00      	nop
 8000470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000472:	bc08      	pop	{r3}
 8000474:	469e      	mov	lr, r3
 8000476:	4770      	bx	lr

08000478 <_fini>:
 8000478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800047a:	bf00      	nop
 800047c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800047e:	bc08      	pop	{r3}
 8000480:	469e      	mov	lr, r3
 8000482:	4770      	bx	lr
